@page
@model IndexModel
@{
    ViewData["Title"] = "Josh's Calendar Tracker";
}

<div class="text-center">
    <h1>@Model.GreetingValue</h1>
    <b>
        <span>Today is </span>
        <span id="Month">@DateTime.Now.ToString("MMM")</span>
        <span>@DateTime.Now.ToString(" d, yyyy")</span>
    </b>
    <p></p>
</div>

<div class="center-container">
    <form id="myForm" method="post">
        @Html.AntiForgeryToken()
        <div class="form-container">
            <!--  Tracker Text -->
            <div class="text-column">
                @if (!Model.Trackers.Any())
                {
                    <p>No trackers found.</p>
                }
                else
                {
                    @foreach (var (i, tracker) in Model.Trackers)
                    {
                        <div>
                            <input type="hidden" name="TrackersValues[@i].Id" class="tracker-id" value="@tracker.Id" />
                            <p class="text-column">@tracker.Name</p>
                        </div>
                    }
                }
            </div>

            <!--  Tracker Components -->
            <div class="components-column">
                @if (Model.Trackers.Any())
                {
                    @foreach (var (i, tracker) in Model.Trackers)
                    {
                        var trackerSliderValue = Model.TrackersValues.TryGetValue(i, out var trackerDataSlider) ? trackerDataSlider.SliderValue : null;
                        var trackerCheckboxValue = Model.TrackersValues.TryGetValue(i, out var trackerDataCheckbox) ? trackerDataCheckbox.CheckboxValue : false;
                        var trackerTextValue = Model.TrackersValues.TryGetValue(i, out var trackerDataText) ? trackerDataText.TextValue : string.Empty;
                        var trackerNumberValue = Model.TrackersValues.TryGetValue(i, out var trackerDataNumber) ? trackerDataNumber.NumberValue : null;
                        var trackerDropdownValue = Model.TrackersValues.TryGetValue(i, out var trackerDataDropdown) ? trackerDataDropdown.DropdownValue : string.Empty;

                        var classvalue = trackerSliderValue == null ? "grayout" : "";
                        <div class="components-container">
                            @switch (tracker.Type)
                            {
                                case "Slider":
                                    <input id="@tracker.Name" name="TrackersValues[@i].SliderValue" type="range" min="0" max="10" class="@classvalue" value="@trackerSliderValue">
                                    <output style="width: 30px;" id="@tracker.Name Output">@trackerSliderValue</output>
                                    break;

                                case "Checkbox":
                                    <input type="checkbox" id="@tracker.Name" name="TrackersValues[@i].CheckboxValue" checked="@(trackerCheckboxValue ?? false)" />
                                    break;

                                case "Text":
                                    <input type="text" id="@tracker.Name" name="TrackersValues[@i].TextValue" placeholder="@tracker.DefaultText" class="tracker-textbox" value="@trackerTextValue" />
                                    break;

                                case "Number":
                                    <input type="number" id="@tracker.Name" name="TrackersValues[@i].NumberValue" placeholder="@tracker.DefaultNumber" class="tracker-textbox" value="@trackerNumberValue" />
                                    break;

                                case "Dropdown":
                                    var dropdownOptions = tracker.DropdownOptions ?? new List<string>();
                                    var trackerData = Model.TrackersValues != null && Model.TrackersValues.TryGetValue(i, out var data) ? data : null;
                                    var dropdownValue = trackerData?.DropdownValue ?? "";

                                    <select id="@tracker.Name" name="TrackersValues[@i].DropdownValue" class="tracker-dropdown">
                                        @foreach (var option in dropdownOptions)
                                        {
                                            <option value="@option" selected="@Equals(option, dropdownValue)">@option</option>
                                        }
                                        @if (!dropdownOptions.Any())
                                        {
                                            <option value="" selected>Add in Settings</option>
                                        }
                                    </select>
                                    break;

                                default:
                                    <p>Tracker type undefined.</p>
                                    break;
                            }
                        </div>
                    }
                }
                else
                {
                    <p>No trackers found.</p>
                }
            </div>
        </div>

        <!-- Submit button -->
        <div class="text-center">
            <button type="button" id="submitButton">Submit</button>
        </div>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    var urlSubmit = '@Url.Page("/Index", "Submit")';
    var loadSettingsUrl = '@Url.Page("/Index", "LoadSettings")';

    if (typeof months === 'undefined') {
        var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    }

    $(document).ready(function () {
        // Flag to track whether Ctrl or Command key is currently held down
        var ctrlKeyPressed = false;

        // Flag to track whether the form is currently being submitted
        var isSubmitting = false;

        // Handle the button click event
        $("#submitButton").click(function () {
            if (!isSubmitting) {
                isSubmitting = true;

                $('input[type="checkbox"]').each(function () {
                    $(this).val($(this).is(':checked').toString());
                });

                var formData = $("#myForm").serialize();

                $.ajax({
                    type: "POST",
                    url: urlSubmit,
                    data: formData,
                    success: function (data) {
                        console.log("Form submitted successfully");
                    },
                    error: function (error) {
                        console.error("Error submitting form: " + error.responseText);
                    },
                    complete: function () {
                        // Reset the submitting flag after a cooldown period
                        setTimeout(function () {
                            isSubmitting = false;
                        }, 500); // Adjust the cooldown time in milliseconds (e.g., 1000 = 1 second)
                    }
                });
            }
        });

        // Handle Ctrl+S keyup event
        $(document).keyup(function (e) {
            // Check if Ctrl or Command key is released
            if ((e.ctrlKey || e.metaKey) && ctrlKeyPressed && e.key === 's' && !$("input, textarea, select").is(":focus")) {
                $("#submitButton").click();
                // Prevent the default browser save behavior
                e.preventDefault()
            }

            // Reset the flags
            ctrlKeyPressed = false;
        });

        // Handle Ctrl keydown event
        $(document).keydown(function (e) {
            // Check if Ctrl or Command key is pressed
            if (e.ctrlKey || e.metaKey) {
                ctrlKeyPressed = true;
                // Prevent the default browser save behavior
                e.preventDefault()
            }
        });


        // Attach input event listeners for sliders
        $("input[type='range']").on("input", function () {
            $(this).removeClass("grayout");
            var trackerName = $(this).attr("id");
            document.getElementById(trackerName + " Output").innerHTML = $(this).val();
        });


        // Setup Month Setting at start
        getLongMonthNamesSetting();
    });

    function getLongMonthNamesSetting() {
        $.ajax({
            type: "POST",
            url: loadSettingsUrl,
            headers: {
                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (data) {
                if (data.success) {
                    if (data.longMonthNamesValue) {
                        months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                    }
                    var currentMonth = new Date().getMonth();
                    document.getElementById("Month").innerText = months[currentMonth];
                } else {
                    console.error("Update failed.");
                }
            },
            error: function (error) {
                console.error(error);
            }
        });
    }
</script>
