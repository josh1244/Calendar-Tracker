@page
@model Calendar_Tracker.Pages.CalendarModel
@{
    ViewData["Title"] = "Calendar";
}


<form>
    @Html.AntiForgeryToken()

    <div class="text-center">
        <h1>Calendar</h1>
         
        <b>
            <span id="editableMonth" onclick="cycleMonth(1)" style="cursor: pointer;"></span>
            <span id="editableDay" onclick="makeEditable(this, `26px`, 2, `day`)" style="cursor: pointer;">@DateTime.Now.ToString("MMM d, yyyy")</span>
            <span id="editableYear" onclick="makeEditable(this, `42px`, 4, `year`)" style="cursor: pointer;"></span>
        </b>

        <p></p>

        <div class="table-buttons">

            <div class="l-triangle-btn" id="leftButton" onclick="nextWeek(-7)"></div>

            <div id="table-container">
                <table id="tableBody" border="3">
                    <thead>
                        <tr>
                            <th>Sunday</th>
                            <th>Monday</th>
                            <th>Tuesday</th>
                            <th>Wednesday</th>
                            <th>Thursday</th>
                            <th>Friday</th>
                            <th>Saturday</th>
                        </tr>
                    </thead>

                    <tbody id="weekTable">
                        <tr>
                            @foreach (var day in Model.CurrentWeekDays)
                            {
                                <td>@day</td>
                            }
                        </tr>
                    </tbody>

                    <tbody id="infoTable">
                    </tbody>
                </table>
            </div>
            <div class="r-triangle-btn" id="rightButton" onclick="nextWeek(7)"></div>
        </div> 
   </div>
</form>

<p></p>

<div class="center-container">
    <form id="myForm" method="post">
        @Html.AntiForgeryToken()
        <div id="trackersContainer" class="form-container">
            <!--  Tracker Text -->
            <div class="text-column">
                @if (Model.Trackers != null && Model.Trackers.Any())
                {
                    for (int i = 0; i <= Model.Trackers.Keys.Max(); i++)
                    {
                        if (Model.Trackers.TryGetValue(i, out var tracker))
                        {
                            <div>
                                <input type="hidden" name="TrackersValues[@i].Id" class="tracker-id" value="@tracker.Id" />
                                <p class="text-column">@tracker.Name</p>
                            </div>
                        }
                    }
                }
                else
                {
                    <p>Loading</p>
                }
            </div>

            <!--  Tracker Components -->
            <div class="components-column">
                @if (Model.Trackers != null && Model.Trackers.Any())
                {
                    for (int i = 0; i <= Model.Trackers.Keys.Max(); i++)
                    {
                        if (Model.Trackers.TryGetValue(i, out var tracker))
                        {
                            var trackerSliderValue = Model.TrackersValues.TryGetValue(i, out var trackerDataSlider) ? trackerDataSlider.SliderValue : 0;
                            var trackerCheckboxValue = Model.TrackersValues.TryGetValue(i, out var trackerDataCheckbox) ? trackerDataCheckbox.CheckboxValue : false;
                            var trackerTextValue = Model.TrackersValues.TryGetValue(i, out var trackerDataText) ? trackerDataText.TextValue : string.Empty;
                            var trackerDropdownValue = Model.TrackersValues.TryGetValue(i, out var trackerDataDropdown) ? trackerDataDropdown.DropdownValue : string.Empty;

                            @switch (tracker.Type)
                            {
                                case "Slider":
                                    <div class="components-container">
                                        <input id="@tracker.Name" name="TrackersValues[@i].SliderValue" type="range" min="0" max="10" value="@trackerSliderValue">
                                        <output style="width: 30px;" id="@tracker.Name Output">@trackerSliderValue</output>
                                    </div>
                                    break;

                                case "Checkbox":
                                    <div class="components-container">
                                        <input type="checkbox" id="@tracker.Name" name="TrackersValues[@i].CheckboxValue" checked="@(trackerCheckboxValue ?? false)" />
                                    </div>
                                    break;

                                case "Text":
                                    <div class="components-container">
                                        <input type="text" id="@tracker.Name" name="TrackersValues[@i].TextValue" placeholder="Text" class="tracker-textbox" value="@trackerTextValue" />
                                    </div>
                                    break;

                                case "Dropdown":
                                    <div class="components-container">
                                        <p>Dropdown not implemented yet!</p>
                                    </div>
                                    break;
                                default:
                                    <p>Tracker type undefined.</p>
                                    break;
                            }
                        }
                    }
                }
                else
                {
                    <p>Loading</p>
                }
            </div>
        </div>

        <!-- Submit button -->
        <div class="text-center">
            <button type="button" id="submitButton">Submit</button>
        </div>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    let trackerCount = 1;
    var updateDateUrl = '@Url.Page("/Calendar", "UpdateDate")'
    var nextWeekUrl = '@Url.Page("/Calendar", "NextWeek")';
    var LoadTrackersUrl = '@Url.Page("/Calendar", "LoadTrackers")';
    var urlSubmit = '@Url.Page("/Calendar", "Submit")';
    var loadSettingsUrl = '@Url.Page("/Calendar", "LoadSettings")';

    $(document).ready(function () {
        // Handle the button click event
        $("#submitButton").click(function () {
            // Modify checkbox values before submitting
            $('input[type="checkbox"]').each(function () {
                if ($(this).is(':checked')) {
                    $(this).val('true');
                } else {
                    // Optionally, set a default value when the checkbox is not checked
                    $(this).val('false');
                }
            });

            // Serialize the form data
            var formData = $("#myForm").serialize();
            // Send an AJAX request to the server
            $.ajax({
                type: "POST",
                url: urlSubmit,
                data: formData,
                success: function (data) {
                    // Handle the success response if needed
                    console.log("Form submitted successfully");
                },
                error: function (error) {
                    // Handle the error response if needed
                    console.error("Error submitting form: " + error.responseText);
                }
            });
        });

        // Handle the button click event to add tracker fields
        $("#addTrackerButton").click(function () {
            @if (Model.Trackers != null && Model.Trackers.Any())
            {
                for (int i = 0; i < Model.Trackers.Count; i++)
                {
                    var tracker = Model.Trackers[i];

                    <text>
                        // JavaScript code here
                        var trackerCount = @i; // Inject C# loop variable into JavaScript
                        var trackerName = "@tracker.Name"; // Inject C# tracker name into JavaScript
                        var trackerId = "@tracker.Id"; // Inject C# tracker Id into JavaScript

                        // Your JavaScript logic using the injected variables
                        // Increment trackerCount and use other injected variables
                        trackerCount++;

                        var trackerTextColumn = $('<div class="text-column">');
                        var trackerTextId = $('<input type="hidden" name="TrackersValues[' + trackerCount + '].Id" class="tracker-id" value="' + trackerId + '" />');
                        var trackerTextName = $('<p class="text-column">' + trackerName + '</p>');
                        var trackerTextColumnEnd = $('</div>');

                        // Append the new fields to the container
                        var trackerFieldsContainer = $('<div class="components-container" id="trackerFields' + trackerCount + '"></div>');
                        trackerFieldsContainer.append(trackerTextColumn);
                        trackerFieldsContainer.append(trackerTextId);
                        trackerFieldsContainer.append(trackerTextName);
                        trackerFieldsContainer.append(trackerTextColumnEnd);

                        $("#trackersContainer").append(trackerFieldsContainer);
                    </text>
                }
            }
        });

        // Handle Ctrl+S keypress event
        $(document).keydown(function (e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                // Trigger the click event on the submit button
                $("#submitButton").click();
                // Prevent the default browser save behavior
                e.preventDefault();
            }
        });
    });
</script>
<script src="~/js/calendar.js"></script>
